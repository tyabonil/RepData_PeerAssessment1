library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(rCharts)
install.packages("rCharts")
setwd("~/repos/coursera/datascience/repdata/peer1")
d  <- read.csv("activity.csv")
sum(is.na(d))
sum(is.na(d$steps))
apply(d, 1, FUN=functon(X) X)
apply(d, 1, FUN=functon(x) sum(x))
apply(d, 1, functon(x) sum(x))
apply(d, 1, functon(x) sum(x[,2]))
d
apply(d, 1, sum)
apply(d, 1, print)
apply(d, 1, function(x) { if(is.na(x$steps)) { print "hi"}})
apply(d, 1, function(x) { if(is.na(x$steps)) { print("hi")}})
d
apply(d, 1, function(x) { if(is.na(x[1])) { print("hi")}})
d
head(d)
d.byInterval <- aggregate(steps ~ interval, data = d, FUN=sum)
d.byInterval
head(d.byInterval)
(d.byInterval[d.byInterval$Interval=5]
(d.byInterval[d.byInterval$Interval==5]
)
(d.byInterval[d.byInterval$Interval==5],)
(d.byInterval[d.byInterval$interval==5],)
d.byInterval[d.byInterval$interval==5, ]
d.byInterval[d.byInterval$interval==5, ]$steps
apply(d, 1, function(x) {
if(is.na(x[1])){
x[1] <- d.byInterval[d.byInterval$interval==x[3], ]$steps
}
print(x)
})
head(d)
apply(d, 1, function(x) {
if(is.na(x[1])){
x[1] <- x[3]##d.byInterval[d.byInterval$interval==x[3], ]$steps
}
print(x)
})
head(d)
head(d.byInterval)
d.byInterval$interval
d.byInterval$interval==2300
d2 <- apply(d, 1, function(x) {
if(is.na(x[1])){
x[1] <- m
}
x
})
d2 <- apply(d, 1, function(x) {
if(is.na(x[1])){
x[1] <- 1
}
x
})
head(d2)
d2 <- apply(d, 1, function(x) {
if(is.na(x[1])){
x[1] <- 1
}
})
head(d2)
d2 <- as.matrix(d)
d2
d2.byDate <- aggregate(steps ~ date, data=d2, FUN=sum)
d2 <- as.data.frame(d2)
d2.byDate <- aggregate(steps ~ date, data=d2, FUN=sum)
head(d2)
head(d)
d2 <- as.table(d)
head(d)
d2 <- rbind(d)
head(d2)
d2$steps[1]
d2$steps[1] <- 0
head(d2)
head(d)
d2[which.is(NA)]
which)NA
is.na(d2$steps)
d2[is.na(d2$steps), "steps"]
d2[is.na(d2$steps), "steps"]  <- 0
head(d2)
d2$steps
?weekdays
wekdays(d2$date)
wewkdays(d2$date)
weekdays(d2$date)
weekdays(d2$date[1])
d2$date
weekdays(d2$date[1])
mypanel = function(x,y,...){
+   panel.xyplot(x,y,...)
+ }
xyplot(steps ~ interval | cont,data=d2,panel=mypanel)
library(lattice)
mypanel = function(x,y,...){
+   panel.xyplot(x,y,...)
+ }
xyplot(steps ~ interval | cont,data=d2,panel=mypanel)
mypanel = function(x,y,...){
+   panel.xyplot(x,y,...)
+ }
xyplot(steps ~ interval | date,data=d2,panel=mypanel)
mypanel = function(x,y,...){
+   panel.xyplot(x,y,...)
+ }
mypanel = function(x,y,...){
+   panel.xyplot(x,y,...)
+ }
mypanel = function(x,y,...){
panel.xyplot(x,y,...)
}
xyplot(steps ~ interval | date,data=d2,panel=mypanel)
weekdays(d2$date)
weekdays(d2$date[1])
d2$date[1]
weekdays(as.character(d2$date))
weekdays(as.character.Date(d2$date))
head(d2$date)
strptime(d2$date)
strptime(d2$date, "%y-%m-%d")
strptime(d2$date, "%y%m%d")
strptime(d2$date, "%y %m %d")
head(d2$date)
strptime(d2$date, "%Y %m %d")
strptime(d2$date, "%Y-%m-%d")
weekdays(strptime(d2$date, "%Y-%m-%d"))
?weekdays
d2$dow <- weekdays(strptime(d2$date, "%Y-%m-%d"))
head(d2)
d2$dow <- gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "Weekday", d2$dow)
d2$dow <- gsub("Saturday|Sunday", "Weekend", d2$dow)
xyplot(steps ~ interval | date,data=d2,panel=mypanel)
xyplot(steps ~ interval | dow,data=d2,panel=mypanel)
